#include <msp430.h> 
#include <string.h>
/*
 * main.c
 */



// FUNCTION DECLARATIONS --------------------------- /
void initPorts();
void initUART();
void uartTxChar(char *c);
void uartTxInt(unsigned int x);
void analyze_cmd(char *c);
//unsigned char *itoa(unsigned int x);

void adcRead(unsigned int channel);
void adcSend(unsigned int channel, unsigned int power);
void dacSend(unsigned int dacValue);
void shiftWordOut(unsigned int wordToShift, unsigned int mode);
// END FUNCTION DECLARATIONS ----------------------- /


// DEFINITIONS ------------------------------------- /

#define MODE_DAC 	0
#define MODE_ADC	1

// * DAC defintions
#define DAC_SCK 	BIT3		// PORT 1.3 - Posedge triggered
#define DAC_SDI 	BIT0		// PORT 1.0
#define DAC_LATCH 	BIT5		// PORT 1.5	- Active LOW
#define DAC_CS 	BIT4		// PORT 1.4
#define DAC_MODE 	0x0000		//
#define DAC_CFG 	0x3000		// 0b0011/XXXX/XXXX/XXXX
#define PORT_DAC	P1OUT

// * ADC definitions
#define ADC_SCK 	BIT1		// SPI Clock - Posedge triggered
#define ADC_SDI 	BIT2		// SDI (ADC control 8-bit)
#define ADC_CONVST	BIT0		// CONVST (Start ADC conversion. Active High)
#define ADC_SDO 	BIT3		// SDO (ADC converted data 16-bit (2LSB Don't care)
#define ADC_BUSY 	BIT4		// If LOW, then ADC is busy
#define PORT_ADC 	P2OUT		// ADC PORT: P2.X

//#define ADC_CH0 	0x8000		// MUX CTRL: 0b1000 ---- ---- ----
#define ADC_CH0 	0x0000		// MUX CTRL: 0b0000 ---- ---- ---- (Differential mode)
#define ADC_CH2 	0x9000     	// MUX CTRL: 0b1001 ---- ---- ----
#define ADC_CH4 	0xA000		// MUX CTRL: 0b1010 ---- ---- ----

#define ADC_ON		0x0000		// PWR CTRL: 0b---- --00 ---- ----
#define ADC_NAP	0x0200		// PWR CTRL: 0b---- --10 ---- ----
#define ADC_SLP	0x0100		// PWR CTRL: 0b---- --01 ---- ----

// END DEFINITIONS --------------------------------- /

volatile unsigned int g_rxFlag = 0;
volatile unsigned int g_adcValue = 0;
volatile char g_rxBuffer = 0;

// MAIN FUNCTION ----------------------------------- /
int main(void) {
    WDTCTL = WDTPW | WDTHOLD;	// Stop watchdog timer
	initPorts();							// initialize ports
	initUART();								// initialize uart
	char rxBuffer[15];						// Serial RX buffer
	__bis_SR_register(LPM0_bits + GIE);		// Enter LPM0
//	__bis_SR_register(GIE);
	volatile unsigned int i = 0;
	while(1) {
		if (g_rxFlag) {
			if (g_rxBuffer == '*') {			// * signifies end of cmd, do analysis
				rxBuffer[i] = g_rxBuffer;
				analyze_cmd(rxBuffer);
		    	memset(rxBuffer, 0, i);
		    	i = 0;
		    }
			else if (g_rxBuffer == 13) {		// compare to ascii {CR} d'13, 0x0D
				analyze_cmd(rxBuffer);
				memset(rxBuffer, 0, i);
				i = 0;
			}
		    else {
		    	rxBuffer[i] = g_rxBuffer;
		    	i++;
		    }
			g_rxFlag = 0;						// reset Rx Flag
		}
		__bis_SR_register(LPM0_bits + GIE);    	// Enter LPM0, interrupts enabled
	}
}
// END MAIN FUNCTION ------------------------------- /


#pragma vector=USCIAB0RX_VECTOR
__interrupt void UART_RX_ISR(void)
{
	LPM0_EXIT;							// exit LPM0
	g_rxBuffer  = UCA0RXBUF;
	g_rxFlag = 1;						// Set global RX flag
}

void uartTxChar(char *c) {
	unsigned int len = strlen(c);
	unsigned int i;
	for(i = 0; i<(len); i++) {
		while(!(IFG2&UCA0TXIFG));
		UCA0TXBUF = c[i];
	}
}
void uartTxInt(unsigned int x) {
	volatile unsigned int number = x;

	int i = 3;
	char c[4];
	unsigned int digit;
	for(i = 3; i >= 0; i--) {
		digit = (number % 10);
		c[i] = digit + 0x30;

		number = (number/10);
	}
	for(i = 0; i <= 3; i++) {
		while(!(IFG2&UCA0TXIFG));
		UCA0TXBUF = c[i];
	}
}


void analyze_cmd(char *c) {
	unsigned int len = strlen(c);
	unsigned int i = 0;

//	if ((c[0] == '!') && (c[len-1] == '*')) {
	if (c[0] == '!') {
		switch(c[1]) {
		case 'V':
			// a V found
			if (c[2] == '?') {
				// voltage query
				adcRead(0);
				uartTxInt(g_adcValue);
//				uartTxChar("\n");				// REMOVE this when using only python app
			}
			else if (c[2] == '=') {
				// voltage output command
				volatile unsigned int dacVoltage = 0;
				volatile unsigned int digit;
				volatile unsigned int place = 1;		// one's place

				for(i = 6; i > 2; i--) {
					digit = (c[i] - 0x30) * place;
					dacVoltage = dacVoltage + digit;
					place = place*10;					// move up a tens place
				}
				dacSend(dacVoltage);
			}
			else
				uartTxChar("\nInvalid V-option\n");
			break;
		case 'C':
			if (c[2] == '?') {
				;								// current query, read from ADC channel 2
				adcRead(2);
				uartTxInt(g_adcValue);
//				uartTxChar("\n");				// REMOVE this when using only python app
			}
			else
				uartTxChar("\nInvalid C-option\n");
			break;
		default:
			uartTxChar("Unknown Command");
			break;
		}
	}
	else
		uartTxChar("\nMissing !\n");
}

void shiftWordOut(unsigned int wordToShift, unsigned int mode) {
/* 		This function shifts the MSB out first and pulls the
 * 	proper control signals high/low depending on the mode
 * 	mode options: 	1 - ADC
 * 					0 - DAC
 */
	volatile unsigned int i;
	volatile unsigned int outBit;
	volatile unsigned int inBit;
	volatile unsigned int adcData = 0;
	wordToShift = wordToShift;

	if (mode == MODE_ADC)
		PORT_ADC &= ~ADC_SCK;
	else if (mode == MODE_DAC) {
		PORT_DAC |= DAC_LATCH;
		PORT_DAC &= ~DAC_CS;
	}

	if (mode == MODE_ADC)
		while(!(P2IN & ADC_BUSY)){;} 				// wait until ADC is not busy

	for(i = 0; i < 16; i++) {
		outBit = wordToShift & (0x8000);
		outBit = outBit >> 15;

		switch(outBit) {
		case 0:
			if (mode == MODE_ADC)
				PORT_ADC &= ~ADC_SDI;
			else if (mode == MODE_DAC) {
				PORT_DAC &= ~DAC_SDI;
			}
			break;
		case 1:
			if (mode == MODE_ADC)
				PORT_ADC |= ADC_SDI;
			else if (mode == MODE_DAC) {
				PORT_DAC |= DAC_SDI;
			}
			break;
		default: break;
		}

		if (mode == MODE_ADC) {
			g_adcValue = 0;
			if (i < 12) {
				inBit = (P2IN & ADC_SDO) && ADC_SDO;

				adcData = adcData | inBit;
				adcData = adcData << 1;
			}
			PORT_ADC |= ADC_SCK;
			PORT_ADC &= ~ADC_SCK;
		}
		else if (mode == MODE_DAC) {
			PORT_DAC |= DAC_SCK;
			PORT_DAC &= ~DAC_SCK;
		}

		wordToShift = (wordToShift << 1);		// drop out leftmost bit
	}

	if (mode == MODE_DAC) {
		PORT_DAC |= DAC_CS;
		PORT_DAC &= ~DAC_LATCH;	// Bring low to latch Din to DAC registers
		PORT_DAC |= DAC_LATCH;
	}
	else if (mode == MODE_ADC)
		g_adcValue = adcData;

}


void adcSend(unsigned int channel, unsigned int power) {
	unsigned int command;
	switch(channel) {
	case 0:
		command = ADC_CH0;
		break;
	case 2:
		command = ADC_CH2;
		break;
	case 4:
		command = ADC_CH4;
		break;
	default:
		break;
	}

	switch(power) {
	case 0:
		command = command + ADC_ON;
		break;
	case 1:
		command = command + ADC_SLP;
		break;
	case 2:
		command = command + ADC_NAP;
		break;
	default:
		command = command + ADC_ON;
	}
	shiftWordOut(command, MODE_ADC);
//	shiftWordOut(command, MODE_ADC);	// twice, 1 send, 1 receives
}

void adcRead(unsigned int channel) {
	unsigned int power = 0;
	PORT_ADC |= ADC_CONVST;
	PORT_ADC &= ~ADC_CONVST;
	adcSend(channel, power);
}

void dacSend(unsigned int dacValue) {	// dacValue = 12-bit digit, 0-4096
	unsigned volatile int dacWord;
	PORT_DAC |= DAC_LATCH;					// Bring DAC LATCH high
	dacWord = dacValue + DAC_CFG;			// add setup bits (MS4Bits)
	shiftWordOut(dacWord, MODE_DAC);
}

void initPorts () {
	P1DIR |= 0x00;
	P2DIR |= 0x00;


	P1DIR |= DAC_SCK + DAC_SDI + DAC_LATCH + DAC_CS;	// configure DAC_* as output
	P1OUT |= DAC_LATCH + DAC_CS;						// bring LATCH & CS high
	P1OUT &= ~(DAC_SCK + DAC_SDI);						//

	P2DIR |= ADC_SCK + ADC_SDI + ADC_CONVST;			// configure ADC_* pins as output
	P2DIR &= ~ADC_BUSY;
	P2DIR &= ~ADC_SDO; 									// configure ADC_SDO pin as input
}



void initUART() {

	BCSCTL1 = CALBC1_1MHZ;
	DCOCTL = CALDCO_1MHZ;

	P1SEL |= BIT1 + BIT2;			// P1.1 = RX PIN; P1.2 = TX PIN
	P1SEL2 |= BIT1 + BIT2;

	UCA0CTL1 |= UCSWRST;                    	// Put state machine in reset
	UCA0CTL1 |= UCSSEL_2;                     	// SMCLK
	UCA0BR0 = 104;                              // 1MHz 9600
	UCA0BR1 = 0;                              	// 1MHz 9600
	UCA0MCTL = UCBRS0;
	UCA0CTL1 &= ~UCSWRST;                   	// Initialize USCI state machine
	IE2 |= UCA0RXIE;							// Enable RX interrupts
}
